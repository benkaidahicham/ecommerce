'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var React = require('react');
var React__default = _interopDefault(React);

function styleInject(css, ref) {
  if ( ref === void 0 ) ref = {};
  var insertAt = ref.insertAt;

  if (!css || typeof document === 'undefined') { return; }

  var head = document.head || document.getElementsByTagName('head')[0];
  var style = document.createElement('style');
  style.type = 'text/css';

  if (insertAt === 'top') {
    if (head.firstChild) {
      head.insertBefore(style, head.firstChild);
    } else {
      head.appendChild(style);
    }
  } else {
    head.appendChild(style);
  }

  if (style.styleSheet) {
    style.styleSheet.cssText = css;
  } else {
    style.appendChild(document.createTextNode(css));
  }
}

var css_248z = ".UnopdropDown_EMFQP {\n  display: inline-block;\n  position: relative;\n}\n\n.UnopdropDown_EMFQP:hover {\n  cursor: pointer;\n}\n\n.reveal-drop-down-menu_EMFQP {\n  display: block !important;\n}\n\n.UnopdropDown_EMFQP .drop-down-menu_EMFQP {\n  margin: 0;\n  position: absolute;\n  top: 100%;\n  z-index: 1;\n  display: none;\n  width: -webkit-fit-content;\n  width: -moz-fit-content;\n  width: fit-content;\n}\n";
styleInject(css_248z);

var DropDown = function DropDown(_ref) {
  var children = _ref.children,
      trigger = _ref.trigger,
      handleClick = _ref.handleClick,
      handleMouseLeave = _ref.handleMouseLeave,
      handleMouseOver = _ref.handleMouseOver,
      dropdownMenuRef = _ref.dropdownMenuRef,
      show = _ref.show,
      style = _ref.style,
      dropdownRef = _ref.dropdownRef,
      makeDisappear = _ref.makeDisappear,
      displayMenuItem = _ref.displayMenuItem,
      dropdownWrapperClassName = _ref.dropdownWrapperClassName,
      dropdownMenuClassName = _ref.dropdownMenuClassName;
  return React__default.createElement("div", {
    className: "UnopdropDown_EMFQP" + (dropdownWrapperClassName ? " " + dropdownWrapperClassName : ''),
    onMouseLeave: handleMouseLeave,
    onMouseOver: handleMouseOver,
    onFocus: function onFocus() {},
    role: "button",
    tabIndex: 0,
    ref: dropdownRef
  }, React__default.cloneElement(trigger, {
    onClick: handleClick,
    show: displayMenuItem,
    hide: makeDisappear,
    open: show
  }), React__default.createElement("div", {
    className: "drop-down-menu_EMFQP" + (show ? ' reveal-drop-down-menu_EMFQP' : '') + (dropdownMenuClassName ? " " + dropdownMenuClassName : ''),
    style: style,
    ref: dropdownMenuRef
  }, typeof children === 'function' ? children({
    show: displayMenuItem,
    hide: makeDisappear,
    open: show
  }) : children));
};

(function (DropDowndirections) {
  DropDowndirections["RIGHT"] = "RIGHT";
  DropDowndirections["LEFT"] = "LEFT";
  DropDowndirections["CENTER"] = "CENTER";
})(exports.DropDowndirections || (exports.DropDowndirections = {}));

var Utility;

(function (Utility) {
  Utility.getStyleObject = function (align, width) {
    var style = {};

    if (align === exports.DropDowndirections.RIGHT) {
      style.right = 0;
    } else if (align === exports.DropDowndirections.CENTER) {
      style.left = "50%";
      style.marginLeft = "-" + width / 2 + "px";
    } else {
      style.left = 0;
    }

    return style;
  };
})(Utility || (Utility = {}));

var UnopDropdown = function UnopDropdown(_ref) {
  var trigger = _ref.trigger,
      children = _ref.children,
      _ref$align = _ref.align,
      align = _ref$align === void 0 ? exports.DropDowndirections.RIGHT : _ref$align,
      onAppear = _ref.onAppear,
      onDisappear = _ref.onDisappear,
      onDisappearStart = _ref.onDisappearStart,
      delay = _ref.delay,
      hover = _ref.hover,
      _ref$closeOnClickOut = _ref.closeOnClickOut,
      closeOnClickOut = _ref$closeOnClickOut === void 0 ? false : _ref$closeOnClickOut,
      _ref$closeOnDropdownC = _ref.closeOnDropdownClicked,
      closeOnDropdownClicked = _ref$closeOnDropdownC === void 0 ? false : _ref$closeOnDropdownC,
      dropdownWrapperClassName = _ref.dropdownWrapperClassName,
      dropdownMenuClassName = _ref.dropdownMenuClassName;

  var _useState = React.useState(false),
      show = _useState[0],
      setShow = _useState[1];

  var timer = React.useRef(null);
  var dropdownWidth = React.useRef(0);
  var dropdownMenuRef = React.useRef(null);
  var dropdownRef = React.useRef(null);
  React.useEffect(function () {
    var element = dropdownMenuRef.current;
    element.style.visibility = 'hidden';
    element.style.display = 'block';
    dropdownWidth.current = element.offsetWidth;
    element.style.display = 'none';
    element.style.visibility = 'visible';
  }, []);

  var handler = function handler(e) {
    var path = e.composedPath();

    if (show && closeOnClickOut && !path.includes(dropdownMenuRef.current)) {
      handleAction(e);
    } else {
      if (show && closeOnDropdownClicked && path.includes(dropdownMenuRef.current)) {
        handleAction(e);
      }
    }
  };

  React.useEffect(function () {
    if (closeOnClickOut || closeOnDropdownClicked) {
      window.addEventListener('click', handler);
    }

    return function () {
      window.removeEventListener('click', handler);
    };
  }, [show]);

  var displayMenuItem = function displayMenuItem(e) {
    if (timer) clearTimeout(timer.current);
    timer.current = null;
    setShow(true);
    if (onAppear) onAppear(e);
  };

  var makeDisappear = function makeDisappear(e) {
    var timerFunc = function timerFunc() {
      return setTimeout(function () {
        setShow(false);
        if (onDisappear) onDisappear(e);
      }, delay || 0);
    };

    timer.current = timerFunc();
    if (onDisappearStart) onDisappearStart(e);
  };

  var handleAction = function handleAction(e) {
    e.preventDefault();
    e.stopPropagation();

    if (show) {
      makeDisappear(e);
    } else {
      displayMenuItem(e);
    }
  };

  var handleMouseOver = function handleMouseOver(e) {
    if (hover && !show) {
      handleAction(e);
    }
  };

  var handleMouseLeave = function handleMouseLeave(e) {
    if (hover && show) {
      handleAction(e);
    }
  };

  return React__default.createElement(DropDown, {
    handleMouseOver: handleMouseOver,
    handleMouseLeave: handleMouseLeave,
    handleClick: handleAction,
    show: show,
    trigger: trigger,
    style: Utility.getStyleObject(align, dropdownWidth.current),
    dropdownMenuRef: dropdownMenuRef,
    dropdownRef: dropdownRef,
    makeDisappear: makeDisappear,
    displayMenuItem: displayMenuItem,
    dropdownWrapperClassName: dropdownWrapperClassName,
    dropdownMenuClassName: dropdownMenuClassName
  }, children);
};

exports.default = UnopDropdown;
//# sourceMappingURL=unop-react-dropdown.cjs.development.js.map
